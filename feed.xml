<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://arfs6.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arfs6.me/" rel="alternate" type="text/html" /><updated>2023-09-27T14:22:33+00:00</updated><id>https://arfs6.me/feed.xml</id><title type="html">Abdulqadir Ahmad</title><subtitle>Abdulqadir Ahmad&apos;s website. Where you can read his blogs, and get to know his projects.</subtitle><author><name>Abdulqadir Ahmad</name></author><entry><title type="html">Navigating Linux File System</title><link href="https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem.html" rel="alternate" type="text/html" title="Navigating Linux File System" /><published>2023-09-27T12:49:00+00:00</published><updated>2023-09-27T12:49:00+00:00</updated><id>https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem</id><content type="html" xml:base="https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem.html"><![CDATA[<p>When I first layed my hands on a unix computer, I was confused. I had no idea where to keep my files or where some files are located. Fast forward, now I am comfortable in linux. I spend most of my time in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">wsl</a>. I am even writing this article in it.</p>

<p>In this post, I will walk you through the linux file system. You’ll know where to keep your file and where some key folders are located. But before we start, let’s go through some jargons.</p>

<h2 id="jargons">Jargons</h2>

<ol>
  <li>Directory: A directory is like a folder in windows. It holds other directories and files.</li>
  <li><em>/</em>: Linux uses a forward slash (<em>/</em>) to seperate directories and files. Windows uses a back slash (**).</li>
  <li>path: Specifies location of a file / directory in a filesystem. e.g. <code class="language-plaintext highlighter-rouge">/root/.bashrc</code>. Remember: <code class="language-plaintext highlighter-rouge">/</code> is used to seperate files and directories in linux. So, <code class="language-plaintext highlighter-rouge">/root/.bashrc</code> means the <code class="language-plaintext highlighter-rouge">.bashrc</code> file is in the <code class="language-plaintext highlighter-rouge">root</code> directory.</li>
  <li>File Permissions: This determines who can read, write or execute a file / directory.</li>
</ol>

<h2 id="root-directory---">Root Directory - <code class="language-plaintext highlighter-rouge">/</code></h2>

<p>This is the main directory. it holds all other directories. Typically, in windows, a path to a file will start with <code class="language-plaintext highlighter-rouge">c:</code>. Where the <code class="language-plaintext highlighter-rouge">c</code> is the drive letter. In linux, a path always starts with <code class="language-plaintext highlighter-rouge">/</code>. Windows uses the drive letter to represent a storage device (like flash) or a partition. While on linux, all storage devices and partitions are in the root directory.</p>

<h2 id="home-directory---">Home Directory - <code class="language-plaintext highlighter-rouge">~</code></h2>

<p>This is usually where you find yourself when you login. If you’re login as the root user, that will be <code class="language-plaintext highlighter-rouge">/root/</code>. If you’re login as another user, e.g. ubuntu, that will be <code class="language-plaintext highlighter-rouge">/home/ubuntu/</code>. A user has read, write and execute permissions to all the files and folders in his home directory unless explicitly changed. <code class="language-plaintext highlighter-rouge">~</code> is a special character that represents a users home directory. You can use it in paths.</p>

<p>This is where I keep my files. I have a folder <code class="language-plaintext highlighter-rouge">docs</code> for documents, <code class="language-plaintext highlighter-rouge">repos</code> for git repos, <code class="language-plaintext highlighter-rouge">projects</code> for my projects and <code class="language-plaintext highlighter-rouge">alx</code> for <a href="https://alxswe.com">alx</a> related files.</p>

<h2 id="temporary-files-directory---tmp">Temporary files directory - <code class="language-plaintext highlighter-rouge">/tmp/</code></h2>

<p>This is a folder where you can keep temporary files. The operating system delete files that are not used for a while. So, don’t keep anything useful here. Some programs keeps there temporary files here. I keep some files I download here. e.g. A script for installing something. I often use it when I want a file temporarily. e.g. A small C program.</p>

<h2 id="executables-directory---bin">Executables Directory - <code class="language-plaintext highlighter-rouge">bin</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">bin</code> directory is used for holding executables. There are several <code class="language-plaintext highlighter-rouge">bin</code> directories. Some of the most important include:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/usr/bin/</code> and <code class="language-plaintext highlighter-rouge">/usr/local/bin/</code>: Most apps you install using the <code class="language-plaintext highlighter-rouge">apt</code> command and default programs like <code class="language-plaintext highlighter-rouge">ls</code> are here.</li>
  <li><code class="language-plaintext highlighter-rouge">~/.local/bin/</code>: This bin directory is local to a user. My <a href="https://github.com/neovim/neovim">neovim</a> executable is here.</li>
</ul>

<h2 id="other-important-directories">Other important Directories</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/var/log/</code>: Some program store it’s log files here. Useful for debugging.</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/</code>: System configuration files and other program configuration files are here. Don’t mess with files here unless you know what you’re doing.</li>
  <li><code class="language-plaintext highlighter-rouge">~/&lt;program name&gt;/</code>: Where <code class="language-plaintext highlighter-rouge">&lt;program name&gt;</code> is a program’s name; Holds user specific configuration for that program. e.g. <code class="language-plaintext highlighter-rouge">~/.ssh/</code> for ssh and <code class="language-plaintext highlighter-rouge">~/.vim/</code> for vim.</li>
  <li><code class="language-plaintext highlighter-rouge">~/.config/</code>: Config directory for some programs.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>With the information you have now, you can navigate arround the linux file system with ease. With time, you’ll recognize other patterns and key directories like <code class="language-plaintext highlighter-rouge">lib</code> and <code class="language-plaintext highlighter-rouge">/var/</code>.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="linux" /><category term="linux" /><summary type="html"><![CDATA[When I first layed my hands on a unix computer, I was confused. I had no idea where to keep my files or where some files are located]]></summary></entry><entry><title type="html">Are Cellphones Connecting or Disconnecting People</title><link href="https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people.html" rel="alternate" type="text/html" title="Are Cellphones Connecting or Disconnecting People" /><published>2023-09-21T20:26:00+00:00</published><updated>2023-09-21T20:26:00+00:00</updated><id>https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people</id><content type="html" xml:base="https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people.html"><![CDATA[<p>It is sad how people are in the same place but there minds are somewhere else. That is what cellphones have done to us. It disconnects you with people arround you.</p>

<p>I used to think it was social media that does that. Now, I have realised, it is the phone itself. Social media is just part of the problem.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="musings" /><category term="celphone" /><summary type="html"><![CDATA[It is sad how people are in the same place but there minds are somewhere else]]></summary></entry><entry><title type="html">Opening files side-by-side in vim</title><link href="https://arfs6.me/blog/2023/09/11/quick-preview-two-files-vim.html" rel="alternate" type="text/html" title="Opening files side-by-side in vim" /><published>2023-09-11T17:08:00+00:00</published><updated>2023-09-11T17:08:00+00:00</updated><id>https://arfs6.me/blog/2023/09/11/quick-preview-two--files-vim</id><content type="html" xml:base="https://arfs6.me/blog/2023/09/11/quick-preview-two-files-vim.html"><![CDATA[<p>I had two text I wanted to view it’s differences and I was already in vim. So, I decided to open both files side-by-side. This is what I did:</p>

<ol>
  <li>I created a new tab. In command mode, I typed <code class="language-plaintext highlighter-rouge">tabe</code> and hit enter.<br />
 <em>Tip:</em> To switch to command mode, from normal mode, type <code class="language-plaintext highlighter-rouge">:</code>.</li>
  <li>I opened the first file. <code class="language-plaintext highlighter-rouge">:e /tmp/1</code>.<br />
 <em>Note:</em> The <code class="language-plaintext highlighter-rouge">:</code> denotes command mode.</li>
  <li>I then opend the second file beside the first file: <code class="language-plaintext highlighter-rouge">:vsplit /tmp/2</code>.</li>
</ol>

<p><img src="/images/2023-11-09-vim-screenshot.png" alt="A screenshot of vim displaying both open files" /></p>

<h2 id="further-reading">Further reading</h2>

<p>Check the help page for <code class="language-plaintext highlighter-rouge">split</code> (<code class="language-plaintext highlighter-rouge">:help split</code>). While you’re there, type <code class="language-plaintext highlighter-rouge">gO</code> from normal mode to view the table of context. Perhaps something might catch your interest.</p>

<p>Thank you for flying arfs6.me :)</p>]]></content><author><name>Abdulqadir Ahmad</name></author><summary type="html"><![CDATA[I had two text I wanted to view it's differences and I was already in vim. So, I decided to open both files side-by-side. This is what I did]]></summary></entry><entry><title type="html">Commands, Motions and Text Objects in vim</title><link href="https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion.html" rel="alternate" type="text/html" title="Commands, Motions and Text Objects in vim" /><published>2023-08-14T16:32:00+00:00</published><updated>2023-08-14T16:32:00+00:00</updated><id>https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion</id><content type="html" xml:base="https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion.html"><![CDATA[<p>I made an awesome discovery <a href="https://twitter.com/arf_s6/status/1690108353614131200?s=20">recently</a> on vim. It was by accident. So, here is the jist:</p>
<h2 id="tldr">TL;DR</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">before</th>
      <th style="text-align: left">insert</th>
      <th style="text-align: left">after</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"hello |world"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ci"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"|"</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">| "hello world"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ci"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"|"</code></td>
    </tr>
  </tbody>
</table>

<p>The <code class="language-plaintext highlighter-rouge">|</code> character represents your cursor position. Notice how it is placed between the <code class="language-plaintext highlighter-rouge">quotes</code> after the command.</p>

<h2 id="full-jist">Full Jist</h2>
<p>If you don’t know what <code class="language-plaintext highlighter-rouge">w</code>, <code class="language-plaintext highlighter-rouge">y</code> or <code class="language-plaintext highlighter-rouge">/</code> does in vim, I’ll suggest trying out <a href="https://linux.how2shout.com/how-to-open-vimtutor-in-neovim-and-vim-commands/">vimtutor</a>. Very hepful!<br />
Now, let’s break down the above commad (<code class="language-plaintext highlighter-rouge">ci"</code>).</p>

<h3 id="synopsys">Synopsys</h3>

<p><strong>Normal mode</strong>: <code class="language-plaintext highlighter-rouge">\&lt;operator-pending-command\&gt;[&lt;inner/A\&gt;]&lt;motion|text-object\&gt;</code><br />
Breakdown:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c</code>: operator-pending-command - These are commands that requires a motion or text object to operate on. They include <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">d</code> and <code class="language-plaintext highlighter-rouge">c</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">i</code>: [optional] inner. You can use either <code class="language-plaintext highlighter-rouge">i</code> for inner or <code class="language-plaintext highlighter-rouge">a</code> to include delimiteres if any. For text objects, I think it is compulsory. It has a specific effect with motions (explained later).</li>
  <li><code class="language-plaintext highlighter-rouge">"</code>: text-object - This is a text object. i.e. The quotes and everything within it. Other text objects include <code class="language-plaintext highlighter-rouge">(</code>, <code class="language-plaintext highlighter-rouge">{</code> and `’.</li>
  <li><code class="language-plaintext highlighter-rouge">w</code>: motion - Any motion. e.g. <code class="language-plaintext highlighter-rouge">w</code>, <code class="language-plaintext highlighter-rouge">j</code> or <code class="language-plaintext highlighter-rouge">s</code>.</li>
</ul>

<h3 id="explanation">Explanation</h3>

<p>These are normal mode commands. Just type <code class="language-plaintext highlighter-rouge">&lt;ESC&gt;</code> from which ever mode you are to go back to normal mode and execute the commands.<br />
<code class="language-plaintext highlighter-rouge">Operator-pending</code> commands are commands that needs more information before it can execute it’s action. e.g. When you want to delete a text in vim, the command is <code class="language-plaintext highlighter-rouge">d</code>. But how will vim know what you want to delete? Tell it! You have a lot of options. You can use <code class="language-plaintext highlighter-rouge">motions</code> to delete “motionwise”. i.e. <code class="language-plaintext highlighter-rouge">dw</code> to delete word, or <code class="language-plaintext highlighter-rouge">d$</code> to delete to the end of the line. Another option is to specify a text-object.<br />
Now, <code class="language-plaintext highlighter-rouge">text-objects</code> is a fancy word for group of text . It could be a sentence (<code class="language-plaintext highlighter-rouge">s</code>), a paragraph (<code class="language-plaintext highlighter-rouge">p</code>),  or method (<code class="language-plaintext highlighter-rouge">]m</code>). The <code class="language-plaintext highlighter-rouge">"</code> in the above example represents text withing quotes.<br />
What about the <code class="language-plaintext highlighter-rouge">inner (i)|A (a)</code> part? Normally, when you specify a motion, it starts from the position of your cursor. But with <code class="language-plaintext highlighter-rouge">i (inner)</code> and <code class="language-plaintext highlighter-rouge">a (A)</code>, you can perform the action on the whole … motion / text-object. i.e. <code class="language-plaintext highlighter-rouge">iw</code> means inner word, excluding spaces around. It works for both text-objects and motions. Let me show you the difference.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">before</th>
      <th style="text-align: left">insert</th>
      <th style="text-align: left">after</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"hello |world</code>”</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ds</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">hello |</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">hello | world</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">dis</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">|</code></td>
    </tr>
  </tbody>
</table>

<p>Without <code class="language-plaintext highlighter-rouge">i</code> or <code class="language-plaintext highlighter-rouge">a</code>, the action is executed starting from your cursor position. With <code class="language-plaintext highlighter-rouge">i</code> or <code class="language-plaintext highlighter-rouge">a</code>, context is included.</p>

<h3 id="step-by-step-guide">Step by step guide</h3>

<ul>
  <li>Open vim: <code class="language-plaintext highlighter-rouge">vim file.txt</code>.</li>
  <li>Go to insert mode: <code class="language-plaintext highlighter-rouge">i</code>.</li>
  <li>Type some text: <code class="language-plaintext highlighter-rouge">"Hello Vim World!"</code>.</li>
  <li>Go back to normal mode: <code class="language-plaintext highlighter-rouge">\&lt;ESC\&gt;</code>.</li>
  <li>Execute command: <code class="language-plaintext highlighter-rouge">ci"</code>.</li>
</ul>

<h3 id="examples">Examples</h3>

<p>I like examples. So, let me give you some:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ci"</code>: Change text <code class="language-plaintext highlighter-rouge">in</code>side quotes.</li>
  <li><code class="language-plaintext highlighter-rouge">yis</code>: Yank / copy whole sentence.</li>
  <li><code class="language-plaintext highlighter-rouge">di(</code>: Delete everything inside the parentheses.</li>
  <li><code class="language-plaintext highlighter-rouge">diw</code>: delete the entire word.</li>
  <li><code class="language-plaintext highlighter-rouge">=i}</code>: Format everything between braces (<code class="language-plaintext highlighter-rouge">{}</code>).</li>
  <li><code class="language-plaintext highlighter-rouge">saa"(</code> Using sandwich plugin, wrap the things inside the quotes with parentheses.  i.e. “hello world” =&gt; <code class="language-plaintext highlighter-rouge">saa")</code> =&gt; (“hello world”).</li>
</ul>

<h4 id="over-here">Over Here</h4>
<p>You can use <code class="language-plaintext highlighter-rouge">/</code> also. e.g. <code class="language-plaintext highlighter-rouge">d/</code>. When you timepress <code class="language-plaintext highlighter-rouge">/</code>, it will open the search area for you to type something to search. When you click enter, it will perform the action  from your current cursor position to the first result of your search. This one was unexpected for me. I knew about using <code class="language-plaintext highlighter-rouge">n</code> but not <code class="language-plaintext highlighter-rouge">/</code>. Wonders of vim 😀</p>

<h2 id="conclusion">Conclusion</h2>

<p>At the end of the day, if you don’t practice / try these commands, you will forget it all. But if you keep practising, it will become second nature!<br />
If you found the post informative, please tell me on mastodon or twitter. Links below. Also, feedback and suggestions are welcomed.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="vim" /><category term="neovim" /><category term="vim" /><summary type="html"><![CDATA[I made an awesome discovery recently on vim. It was by accident. So, here is the jist]]></summary></entry><entry><title type="html">NvimPager</title><link href="https://arfs6.me/blog/neovim/2023/08/05/nvimpager.html" rel="alternate" type="text/html" title="NvimPager" /><published>2023-08-05T20:44:00+00:00</published><updated>2023-08-05T20:44:00+00:00</updated><id>https://arfs6.me/blog/neovim/2023/08/05/nvimpager</id><content type="html" xml:base="https://arfs6.me/blog/neovim/2023/08/05/nvimpager.html"><![CDATA[<p>I have been using neovim as a pager for quite a while now. I use it for man pages, diffs and git logs. The only disadvantage of it so far is that you can’t open it unless standard input (stdin) reaches End-Of-File (EOF). This happens when you’re reading from a program that might take a while before it finishes writing it’s output. I hardly even encounter that. According to the project’s README, “large files are slowing down neovim on startup”. What about it’s advantages? Well … I get to use neovim as my pager. All the cool stuffs about neovim.</p>
<h2 id="installation">Installation</h2>
<p>You need <code class="language-plaintext highlighter-rouge">neovim</code> version 0.9 or later, <code class="language-plaintext highlighter-rouge">bash</code> (Most probably installed) and <code class="language-plaintext highlighter-rouge">scdoc</code> for man page.</p>

<ol>
  <li>Neovim: The neovim wiki has a page on installing neovim for all platforms. I prefer the App Image one. Link: https://github.com/neovim/neovim/wiki/Installing-Neovim</li>
  <li>Bash: If you are using Linux, MacOS or WSL, you already have bash installed. I haven’t tried installing nvim pager on windows.</li>
  <li>Scdoc: It is available on most package managers. Read <a href="https://command-not-found.com/scdoc">this</a> for more info.</li>
</ol>

<p>Now, lets install nvimpager!</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a directory to store the repo.</span>
<span class="nb">mkdir</span> ~/repos
<span class="nb">cd</span> ~/repos <span class="c"># Switching to the created directory</span>
<span class="c"># clone nvim pager's repo</span>
git clone https://github.com/lucc/nvimpager
<span class="nb">cd </span>nvimpager <span class="c"># Go to nvim pager</span>
make <span class="nb">install</span>
</code></pre></div></div>
<p>This will install nvim pager to the default location on your system. To change the location, set the <code class="language-plaintext highlighter-rouge">PREFIX</code> variable to the  location. e.g. To install nvimpager to <code class="language-plaintext highlighter-rouge">~/.local</code>, run:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nv">PREFIX</span><span class="o">=</span><span class="nv">$HOME</span>/.local
</code></pre></div></div>
<h2 id="usage">Usage</h2>
<p><code class="language-plaintext highlighter-rouge">nvimpager file</code> to view a file in nvim pager or pipe a command to nvim pager: <code class="language-plaintext highlighter-rouge">command --help | nvimpager</code>. I have aliased nvimpager to np.<br />
Nvimpager has three mode:</p>
<ol>
  <li>Pager mode: In this mode, the input is opened in neovim with read only mode. You can use all normal neovim commands that doesn’t edit the buffer. To set pager mode, pass the <code class="language-plaintext highlighter-rouge">-p</code> option to nvim pager.</li>
  <li>Cat mode: In this mode, all the input is written to your terminal’s standard output (stdout). It will still have syntax highlighting To set cat mode, pass <code class="language-plaintext highlighter-rouge">-c</code> to nvim pager.</li>
  <li>Auto mode: This is the default. If the text can fit in your terminal, nvimpager uses cat mode. Otherwise, it uses pager mode.<br />
To pass neovim options to nvim pager, specify it after the <code class="language-plaintext highlighter-rouge">--</code> option. i.e. <code class="language-plaintext highlighter-rouge">nvimpager -- -u ~/nvim/init.lua</code>. On this note, nvimpager’s configu files is different from that of neovim. That of nvimpager lives in <code class="language-plaintext highlighter-rouge">~/.config/nvimpager</code>. My nvimpager is focused on having very little startup time.<br />
Lastly, to use nvimpager as your default pager, you have to set the <code class="language-plaintext highlighter-rouge">MANPAGER</code> and <code class="language-plaintext highlighter-rouge">PAGER</code> environment variables to <code class="language-plaintext highlighter-rouge">"nvimpager"</code>. And <code class="language-plaintext highlighter-rouge">git config core.pager "nvimpager"</code> for git.
    <h2 id="note-for-vim-users">Note for Vim Users</h2>
    <p>For vim users, you can checkout vimpager at https://github.com/rkitover/vimpager</p>
  </li>
</ol>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="neovim" /><summary type="html"><![CDATA[I have been using neovim as a pager for quite a while now. I use it for man pages, diffs and git logs. The only disadvantage of it so far is]]></summary></entry><entry><title type="html">Pythonic Wonders: Cache, Decorate, Parameterize, Memoize, and Mock!</title><link href="https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python.html" rel="alternate" type="text/html" title="Pythonic Wonders: Cache, Decorate, Parameterize, Memoize, and Mock!" /><published>2023-07-03T14:57:00+00:00</published><updated>2023-07-03T14:57:00+00:00</updated><id>https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python.html"><![CDATA[<p>The following passage was written by a <a href="https://twitter.com/kpakpando1">friend</a> of mine. It is so captivating. I like it! If you also like it, please reach out to him on <a href="https://twitter.com/kpakpando1">twitter</a> and tell him!<br />
Enjoy!<br />
<em>First it was cache. And then decorate. And now parameterize, memoize, and mock!!!</em><br />
<em>Python never ceases to amaze!</em><br />
<em>So what, if any, do these have in common, besides being wrapped together in a module? A lot!</em><br />
<em>Memoization is a use case for caching, i.e., memoization is caching when the cached thing is the result of a function call; in that case, the function being cached has to be designed to maintain the cache. And if the function is not natively able to memoize, it’s easy - you decorate it! Remember, decoration is that magic that makes a function appear to do more than what it is born to do, without it having to be born again.😀 Just memoize it! By decorating it!</em><br />
<em>And after that, you can even mock it. Yes, that’s right - pretend to be the function when you are a pure fake! And it’s easy to do that too - just import Mock from unittest.mock and create a mock object and make it fake to return anything you wish! Or, if you are enjoying the pun, try MagicMock. Same stuff, with more Python magic sprinkled on it.😀</em><br />
<em>And oh, I almost forgot: while you’re at it, there is more fun - you can make multiple tests more cool - just parameterize it. That is, use one test with parameters to do several others at once, like killing several birds with one stone.</em><br />
<em>See? It’s easy when you think about it!</em><br />
<em>No cache😀</em><br />
<em>🤩Do.Pythonic.Things</em></p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[First it was cache. And then decorate. And now parameterize, memoize, and mock!!! Python never ceases to amaze!]]></summary></entry></feed>