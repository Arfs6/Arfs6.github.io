<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://arfs6.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arfs6.me/" rel="alternate" type="text/html" /><updated>2023-11-05T15:53:48+00:00</updated><id>https://arfs6.me/feed.xml</id><title type="html">Abdulqadir Ahmad</title><subtitle>Abdulqadir Ahmad&apos;s website. Where you can read his blogs, and get to know his projects.</subtitle><author><name>Abdulqadir Ahmad</name></author><entry><title type="html">My math workstation</title><link href="https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation.html" rel="alternate" type="text/html" title="My math workstation" /><published>2023-11-05T12:27:00+00:00</published><updated>2023-11-05T12:27:00+00:00</updated><id>https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation</id><content type="html" xml:base="https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation.html"><![CDATA[<p>As a computer science student, I take courses with calculations in it. I am in the process of building my “workstation” or “schoolstation” for learning and writing such courses. This post is for me to share how my work station is, It might be useful for other people who are also trying to figure out what tools to use.</p>

<p>I’ll be dividing this post into three:</p>

<ol>
  <li><a href="#writing">Writing</a></li>
  <li><a href="#transpiling">Transpiling</a></li>
  <li><a href="#reading">Reading</a></li>
</ol>

<h2 id="writing">Writing</h2>

<p>This step involves writing the LaTeX document. I started using <a href="https://github.com/tsengwoody/Access8Math">access8math</a> for writing the TeX document. With time, I gradually moved to <a href="https://neovim.io">neovim</a> for the writing part, and I am now fully using it to write my LaTeX “code”.  Neovim had a lot more to offer.</p>

<p>I use neovim in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">wsl</a>, but it works in windows as well. I just tend to spend more time in wsl. If you’re interested in neovim and want to try it out, here is it’s installation guide: <a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">https://github.com/neovim/neovim/wiki/Installing-Neovim</a>. I don’t know which tutorial to suggest, I used the builtin vim tutor.</p>

<p>Here are the plugins and features of neovim I use:</p>

<ul>
  <li><strong><a href="https://vim.fandom.com/wiki/Using_marks">Marks</a></strong>: This lets me to mark a section in the file I am editing. It allows me to jump from one part of the document to another. E.g. From the question to the solution.</li>
  <li>Jump to next or previous method. This is a command in vim that jumps to next or previous methods. In LaTeX document, it will jump to next or previous environment. E.g. <code class="language-plaintext highlighter-rouge">\begin{equation}</code> environment. This is very useful when navigating the file. <code class="language-plaintext highlighter-rouge">[m</code> jumps to previous environment and <code class="language-plaintext highlighter-rouge">]m</code> jumps to next environment.</li>
  <li><strong><a href="https://github.com/lervag/vimtex">vimtex</a></strong>: This is a plugin that adds better support for LaTeX in vim. It has a lot of features. E.g. You can use <code class="language-plaintext highlighter-rouge">%</code> to jump between the start and end of an environment.</li>
  <li>A custom script that transpiles (compiles) my LaTeX document to HTML when I save the file. The script is very simple, it just calls <code class="language-plaintext highlighter-rouge">pandoc</code> and passes the appropriate arguments for the conversion. I would write a different blog post on how to do that.</li>
</ul>

<p>This aren’t all the features I use, I’ll add more with time.</p>

<h2 id="transpiling">Transpiling</h2>

<p>The two formats I usually transpile LaTeX to are pdf and HTML. As for the pdf, I use pdflatex, which comes with most LaTeX distributions.You can get a LaTeX distribution here: <a href="https://www.latex-project.org/get/">https://www.latex-project.org/get/</a>. As for the HTML conversion, I use pandoc. Pandoc is a document converter. You can install one by visiting this page and following the instruction as per your operating system: <a href="https://pandoc.org/installing.html">https://pandoc.org/installing.html</a></p>

<p>Both pandoc and pdflatex are command line tools. Here are the commands I use to transpile to HTML:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc <span class="nt">-f</span> latex <span class="nt">-t</span> html <span class="nt">--mathml</span> <span class="nt">-o</span> file.html file.tex
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">file.tex</code> is the LaTeX file and <code class="language-plaintext highlighter-rouge">file.html</code> is the file to store the HTML output in. The <code class="language-plaintext highlighter-rouge">--mathml</code> tells pandoc to convert it to mathml, you can use <code class="language-plaintext highlighter-rouge">--mathjax</code> to convert it to mathjax.</p>

<p>Here is the command I use to convert to pdf:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdflatex file.tex
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">file.tex</code> is the LaTeX file. On successful compilation, <code class="language-plaintext highlighter-rouge">pdflatex</code> stores the pdf output in <code class="language-plaintext highlighter-rouge">file.pdf</code>. It changes the extension of the input file from <code class="language-plaintext highlighter-rouge">.tex</code> to <code class="language-plaintext highlighter-rouge">.pdf</code>. I haven’t figured out what to do when there is an error in my LaTeX, I just abort the process by pressing ctrl+d and going back to neovim to figure it out.</p>

<h2 id="reading">Reading</h2>

<p>This section might not be useful to sighted people. As a blind person, I have to figure out how to read the math I wrote. While writing, I read the LaTeX text directly. After I am done writing, I usually want to cross check what I wrote. For this step, I convert the LaTeX document to HTML, then open it in my browser (Microsoft edge for now).</p>

<p>I am an <a href="https://www.nvaccess.org/">NVDA</a> user. For me to be able to read math in my browser, I need a math player. I have both <a href="https://github.com/tsengwoody/Access8Math">access8math</a> and <a href="https://addons.nvda-project.org/addons/MathCAT.en.html">mathcat</a>. I have been using mathcat lately though.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This is my workstation for LaTeX. I will try to update this post as it evolves. If you have any suggestion or comment, don’t hesitate to contact me using any of the options at the bottom of this page.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="latex" /><category term="vim" /><category term="nvda" /><category term="latex," /><category term="nvda," /><category term="mathml," /><category term="mathjax," /><category term="neovim," /><category term="vim" /><summary type="html"><![CDATA[My LaTeX setup]]></summary></entry><entry><title type="html">Are you blind?</title><link href="https://arfs6.me/blog/blind/2023/10/26/are-you-blind.html" rel="alternate" type="text/html" title="Are you blind?" /><published>2023-10-26T20:55:00+00:00</published><updated>2023-10-26T20:55:00+00:00</updated><id>https://arfs6.me/blog/blind/2023/10/26/are-you-blind</id><content type="html" xml:base="https://arfs6.me/blog/blind/2023/10/26/are-you-blind.html"><![CDATA[<p>I get asked this question often, The two times that stick out are:</p>

<ul>
  <li>This one was when i was in secondary school (or high school).  I and my friends were going somewhere on foot, and they stopped to buy something. As usuall, my white cane was with one of them. Seeing that I know the road and I am already on a pavement (walkway), I decided to continue walking without a guide. A couple of steps later, I bumped into  someone. His first reaction was:
    <blockquote>
      <p>Are you blind?</p>
    </blockquote>

    <p>I was like:</p>

    <blockquote>
      <p>Yes.</p>
    </blockquote>

    <p>After some convincing by my friends, he realised I was truly blind and the table turned on him.</p>
  </li>
  <li>This next one was very recent. I was in a hall with a couple of people, and someway, somehow my phone fell. And then boom someone goes <em>“Are you blind?”</em>. I just ignored the question and continued using my phone. Later the person came to realise, I was truly blind.</li>
</ul>

<h2 id="lesson">Lesson</h2>

<p>Try as much as possible not to ask such questions, especially to someone you don’t know. Blind people exist, and who knows, maybe the person is blind. It doesn’t border me that much, but I’m sure it is going to border some of the people that asked me.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="blind" /><summary type="html"><![CDATA[I get asked this question often. The two times that stick out are]]></summary></entry><entry><title type="html">Joining two absolute paths in python</title><link href="https://arfs6.me/blog/python/2023/10/21/python-os-path-join.html" rel="alternate" type="text/html" title="Joining two absolute paths in python" /><published>2023-10-21T18:55:00+00:00</published><updated>2023-10-21T18:55:00+00:00</updated><id>https://arfs6.me/blog/python/2023/10/21/python-os-path-join</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/10/21/python-os-path-join.html"><![CDATA[<p>Let’s join two absolute paths using the <code class="language-plaintext highlighter-rouge">os</code> module of python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">os</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/arfs6</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># Expecting /home/arfs6/proj
</span><span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>This was unexpected to me. I tried solving it by converting the second path to a relative path, and here is what i got:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">relpath</span><span class="p">(</span><span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">../../../proj</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> 
</code></pre></div></div>

<p>Looks like python is been too smart here. Just do what I asked you, nothing more, nothing less!</p>

<p>At this point, I don’t know what to do. I don’t want to resolve to string manipulation for paths.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><category term="python," /><category term="os-module" /><summary type="html"><![CDATA[>>> os.path.join('/home/arfs6', '/proj') # Expecting /home/arfs6/proj]]></summary></entry><entry><title type="html">Did you know? ufw is a python script.</title><link href="https://arfs6.me/blog/python/2023/10/19/ufw-python.html" rel="alternate" type="text/html" title="Did you know? ufw is a python script." /><published>2023-10-19T19:33:00+00:00</published><updated>2023-10-19T19:33:00+00:00</updated><id>https://arfs6.me/blog/python/2023/10/19/ufw-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/10/19/ufw-python.html"><![CDATA[<p>Out of curiosity, I wanted to know what ufw (uncomplicated Firewall) was made up of. So, I looked for it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>which ufw
/usr/sbin/ufw
</code></pre></div></div>

<p>Yours might be somewhere else. I then paid the directory a visit and checked what the file was made up of:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /usr/sbin
<span class="nv">$ </span>file ufw
ufw: Python script, ASCII text executable
</code></pre></div></div>

<p>I then opened it with vim, but since I can open it here, let me show you some part of it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">head </span>ufw
<span class="c">#! /usr/bin/python3</span>
<span class="c">#</span>
<span class="c"># ufw: front-end for Linux firewalling (cli)</span>
<span class="c">#</span>
<span class="c"># Copyright 2008-2021 Canonical Ltd.</span>
<span class="c">#</span>
<span class="c">#    This program is free software: you can redistribute it and/or modify</span>
<span class="c">#    it under the terms of the GNU General Public License version 3,</span>
<span class="c">#    as published by the Free Software Foundation.</span>
<span class="c">#</span>
<span class="nv">$ </span><span class="nb">grep</span> <span class="s1">'import'</span> ufw
from __future__ import print_function
import os
import sys
import warnings
import ufw.frontend
from ufw.common import UFWError
from ufw.util import error, warn, msg, _findpath, create_lock, release_lock
import gettext
</code></pre></div></div>

<p>The first command <code class="language-plaintext highlighter-rouge">head</code> prints the first ten lines of the file, while the second command <code class="language-plaintext highlighter-rouge">grep</code> prints all the lines that contain <code class="language-plaintext highlighter-rouge">import</code> in it.</p>

<p>So, it turns out, ufw is “just” a python script bundled with a package that lives somewhere in <code class="language-plaintext highlighter-rouge">sys.path</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>So, I wonder, which other tools I use regularly are also python scripts?</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><category term="python," /><category term="ufw" /><summary type="html"><![CDATA[I wonder which tool I am using also runs on python]]></summary></entry><entry><title type="html">Using mv instead of rm</title><link href="https://arfs6.me/blog/linux/2023/10/02/using-mv-in-place-of-rm.html" rel="alternate" type="text/html" title="Using mv instead of rm" /><published>2023-10-02T10:35:00+00:00</published><updated>2023-10-02T10:35:00+00:00</updated><id>https://arfs6.me/blog/linux/2023/10/02/using-mv-in-place-of-rm</id><content type="html" xml:base="https://arfs6.me/blog/linux/2023/10/02/using-mv-in-place-of-rm.html"><![CDATA[<p>The <code class="language-plaintext highlighter-rouge">rm</code> command is dangerous. I have created an alias to use <code class="language-plaintext highlighter-rouge">2smvrm</code> instead of it. The command is in my <code class="language-plaintext highlighter-rouge">~/.bashrc</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias rm</span><span class="o">=</span><span class="s1">'mv --force -t ~/.local/share/trash '</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-t</code> option allows me to specify the target directory at the beginning of the command. The alias moves all the files specified to <code class="language-plaintext highlighter-rouge">~/.local/share/trash</code>. This means, if I change my mind at any time, I can pay the directory a visit.</p>

<p>If I really want to use <code class="language-plaintext highlighter-rouge">rm</code>, I use <code class="language-plaintext highlighter-rouge">/bin/rm</code>.</p>

<p>There are a lot of issues with the above command.</p>

<ol>
  <li>If a file with the same name with the one I want to move has already exist, it will fail.</li>
  <li>The files might use a lot of space overtime. I thought of using the <code class="language-plaintext highlighter-rouge">/tmp/</code> directory since the os deletes file in there automatically.</li>
</ol>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="linux" /><category term="linux" /><summary type="html"><![CDATA[The `rm` command is dangerous. I have created an]]></summary></entry><entry><title type="html">Reproducing bugs</title><link href="https://arfs6.me/blog/programming/2023/10/01/chasing-bugs.html" rel="alternate" type="text/html" title="Reproducing bugs" /><published>2023-10-01T19:03:00+00:00</published><updated>2023-10-01T19:03:00+00:00</updated><id>https://arfs6.me/blog/programming/2023/10/01/chasing-bugs</id><content type="html" xml:base="https://arfs6.me/blog/programming/2023/10/01/chasing-bugs.html"><![CDATA[<p>As a developer, you are always surrounded by bugs. It is funny how sometimes, your goal is to reproduce the bug.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="programming" /><category term="programming," /><category term="bugs" /><summary type="html"><![CDATA[It is funny how sometimes, your goal is to reproduce the bug.]]></summary></entry><entry><title type="html">Navigating Linux File System</title><link href="https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem.html" rel="alternate" type="text/html" title="Navigating Linux File System" /><published>2023-09-27T12:49:00+00:00</published><updated>2023-09-27T12:49:00+00:00</updated><id>https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem</id><content type="html" xml:base="https://arfs6.me/blog/linux/2023/09/27/navigating-linux-filesystem.html"><![CDATA[<p>When I first layed my hands on a unix computer, I was confused. I had no idea where to keep my files or where some files are located. Fast forward, now I am comfortable in linux. I spend most of my time in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">wsl</a>. I am even writing this article in it.</p>

<p>In this post, I will walk you through the linux file system. You’ll know where to keep your file and where some key folders are located. But before we start, let’s go through some jargons.</p>

<h2 id="jargons">Jargons</h2>

<ol>
  <li>Directory: A directory is like a folder in windows. It holds other directories and files.</li>
  <li><em>/</em>: Linux uses a forward slash (<em>/</em>) to seperate directories and files. Windows uses a back slash (**).</li>
  <li>path: Specifies location of a file / directory in a filesystem. e.g. <code class="language-plaintext highlighter-rouge">/root/.bashrc</code>. Remember: <code class="language-plaintext highlighter-rouge">/</code> is used to seperate files and directories in linux. So, <code class="language-plaintext highlighter-rouge">/root/.bashrc</code> means the <code class="language-plaintext highlighter-rouge">.bashrc</code> file is in the <code class="language-plaintext highlighter-rouge">root</code> directory.</li>
  <li>File Permissions: This determines who can read, write or execute a file / directory.</li>
</ol>

<h2 id="root-directory---">Root Directory - <code class="language-plaintext highlighter-rouge">/</code></h2>

<p>This is the main directory. it holds all other directories. Typically, in windows, a path to a file will start with <code class="language-plaintext highlighter-rouge">c:</code>. Where the <code class="language-plaintext highlighter-rouge">c</code> is the drive letter. In linux, a path always starts with <code class="language-plaintext highlighter-rouge">/</code>. Windows uses the drive letter to represent a storage device (like flash) or a partition. While on linux, all storage devices and partitions are in the root directory.</p>

<h2 id="home-directory---">Home Directory - <code class="language-plaintext highlighter-rouge">~</code></h2>

<p>This is usually where you find yourself when you login. If you’re login as the root user, that will be <code class="language-plaintext highlighter-rouge">/root/</code>. If you’re login as another user, e.g. ubuntu, that will be <code class="language-plaintext highlighter-rouge">/home/ubuntu/</code>. A user has read, write and execute permissions to all the files and folders in his home directory unless explicitly changed. <code class="language-plaintext highlighter-rouge">~</code> is a special character that represents a users home directory. You can use it in paths.</p>

<p>This is where I keep my files. I have a folder <code class="language-plaintext highlighter-rouge">docs</code> for documents, <code class="language-plaintext highlighter-rouge">repos</code> for git repos, <code class="language-plaintext highlighter-rouge">projects</code> for my projects and <code class="language-plaintext highlighter-rouge">alx</code> for <a href="https://alxswe.com">alx</a> related files.</p>

<h2 id="temporary-files-directory---tmp">Temporary files directory - <code class="language-plaintext highlighter-rouge">/tmp/</code></h2>

<p>This is a folder where you can keep temporary files. The operating system delete files that are not used for a while. So, don’t keep anything useful here. Some programs keeps there temporary files here. I keep some files I download here. e.g. A script for installing something. I often use it when I want a file temporarily. e.g. A small C program.</p>

<h2 id="executables-directory---bin">Executables Directory - <code class="language-plaintext highlighter-rouge">bin</code></h2>

<p>The <code class="language-plaintext highlighter-rouge">bin</code> directory is used for holding executables. There are several <code class="language-plaintext highlighter-rouge">bin</code> directories. Some of the most important include:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/usr/bin/</code> and <code class="language-plaintext highlighter-rouge">/usr/local/bin/</code>: Most apps you install using the <code class="language-plaintext highlighter-rouge">apt</code> command and default programs like <code class="language-plaintext highlighter-rouge">ls</code> are here.</li>
  <li><code class="language-plaintext highlighter-rouge">~/.local/bin/</code>: This bin directory is local to a user. My <a href="https://github.com/neovim/neovim">neovim</a> executable is here.</li>
</ul>

<h2 id="other-important-directories">Other important Directories</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/var/log/</code>: Some program store it’s log files here. Useful for debugging.</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/</code>: System configuration files and other program configuration files are here. Don’t mess with files here unless you know what you’re doing.</li>
  <li><code class="language-plaintext highlighter-rouge">~/&lt;program name&gt;/</code>: Where <code class="language-plaintext highlighter-rouge">&lt;program name&gt;</code> is a program’s name; Holds user specific configuration for that program. e.g. <code class="language-plaintext highlighter-rouge">~/.ssh/</code> for ssh and <code class="language-plaintext highlighter-rouge">~/.vim/</code> for vim.</li>
  <li><code class="language-plaintext highlighter-rouge">~/.config/</code>: Config directory for some programs.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>With the information you have now, you can navigate arround the linux file system with ease. With time, you’ll recognize other patterns and key directories like <code class="language-plaintext highlighter-rouge">lib</code> and <code class="language-plaintext highlighter-rouge">/var/</code>.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="linux" /><category term="linux" /><summary type="html"><![CDATA[When I first layed my hands on a unix computer, I was confused. I had no idea where to keep my files or where some files are located]]></summary></entry><entry><title type="html">Are Cellphones Connecting or Disconnecting People</title><link href="https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people.html" rel="alternate" type="text/html" title="Are Cellphones Connecting or Disconnecting People" /><published>2023-09-21T20:26:00+00:00</published><updated>2023-09-21T20:26:00+00:00</updated><id>https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people</id><content type="html" xml:base="https://arfs6.me/blog/musings/2023/09/21/cellphones-disconnecting-people.html"><![CDATA[<p>It is sad how people are in the same place but there minds are somewhere else. That is what cellphones have done to us. It disconnects you with people arround you.</p>

<p>I used to think it was social media that does that. Now, I have realised, it is the phone itself. Social media is just part of the problem.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="musings" /><category term="celphone" /><summary type="html"><![CDATA[It is sad how people are in the same place but there minds are somewhere else]]></summary></entry><entry><title type="html">Opening files side-by-side in vim</title><link href="https://arfs6.me/blog/2023/09/11/quick-preview-two-files-vim.html" rel="alternate" type="text/html" title="Opening files side-by-side in vim" /><published>2023-09-11T17:08:00+00:00</published><updated>2023-09-11T17:08:00+00:00</updated><id>https://arfs6.me/blog/2023/09/11/quick-preview-two--files-vim</id><content type="html" xml:base="https://arfs6.me/blog/2023/09/11/quick-preview-two-files-vim.html"><![CDATA[<p>I had two text I wanted to view it’s differences and I was already in vim. So, I decided to open both files side-by-side. This is what I did:</p>

<ol>
  <li>I created a new tab. In command mode, I typed <code class="language-plaintext highlighter-rouge">tabe</code> and hit enter.<br />
 <em>Tip:</em> To switch to command mode, from normal mode, type <code class="language-plaintext highlighter-rouge">:</code>.</li>
  <li>I opened the first file. <code class="language-plaintext highlighter-rouge">:e /tmp/1</code>.<br />
 <em>Note:</em> The <code class="language-plaintext highlighter-rouge">:</code> denotes command mode.</li>
  <li>I then opend the second file beside the first file: <code class="language-plaintext highlighter-rouge">:vsplit /tmp/2</code>.</li>
</ol>

<p><img src="/images/2023-11-09-vim-screenshot.png" alt="A screenshot of vim displaying both open files" /></p>

<h2 id="further-reading">Further reading</h2>

<p>Check the help page for <code class="language-plaintext highlighter-rouge">split</code> (<code class="language-plaintext highlighter-rouge">:help split</code>). While you’re there, type <code class="language-plaintext highlighter-rouge">gO</code> from normal mode to view the table of context. Perhaps something might catch your interest.</p>

<p>Thank you for flying arfs6.me :)</p>]]></content><author><name>Abdulqadir Ahmad</name></author><summary type="html"><![CDATA[I had two text I wanted to view it's differences and I was already in vim. So, I decided to open both files side-by-side. This is what I did]]></summary></entry><entry><title type="html">Commands, Motions and Text Objects in vim</title><link href="https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion.html" rel="alternate" type="text/html" title="Commands, Motions and Text Objects in vim" /><published>2023-08-14T16:32:00+00:00</published><updated>2023-08-14T16:32:00+00:00</updated><id>https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion</id><content type="html" xml:base="https://arfs6.me/blog/vim/2023/08/14/vim-commands-and-motion.html"><![CDATA[<p>I made an awesome discovery <a href="https://twitter.com/arf_s6/status/1690108353614131200?s=20">recently</a> on vim. It was by accident. So, here is the jist:</p>
<h2 id="tldr">TL;DR</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">before</th>
      <th style="text-align: left">insert</th>
      <th style="text-align: left">after</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"hello |world"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ci"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"|"</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">| "hello world"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ci"</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"|"</code></td>
    </tr>
  </tbody>
</table>

<p>The <code class="language-plaintext highlighter-rouge">|</code> character represents your cursor position. Notice how it is placed between the <code class="language-plaintext highlighter-rouge">quotes</code> after the command.</p>

<h2 id="full-jist">Full Jist</h2>
<p>If you don’t know what <code class="language-plaintext highlighter-rouge">w</code>, <code class="language-plaintext highlighter-rouge">y</code> or <code class="language-plaintext highlighter-rouge">/</code> does in vim, I’ll suggest trying out <a href="https://linux.how2shout.com/how-to-open-vimtutor-in-neovim-and-vim-commands/">vimtutor</a>. Very hepful!<br />
Now, let’s break down the above commad (<code class="language-plaintext highlighter-rouge">ci"</code>).</p>

<h3 id="synopsys">Synopsys</h3>

<p><strong>Normal mode</strong>: <code class="language-plaintext highlighter-rouge">\&lt;operator-pending-command\&gt;[&lt;inner/A\&gt;]&lt;motion|text-object\&gt;</code><br />
Breakdown:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c</code>: operator-pending-command - These are commands that requires a motion or text object to operate on. They include <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">d</code> and <code class="language-plaintext highlighter-rouge">c</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">i</code>: [optional] inner. You can use either <code class="language-plaintext highlighter-rouge">i</code> for inner or <code class="language-plaintext highlighter-rouge">a</code> to include delimiteres if any. For text objects, I think it is compulsory. It has a specific effect with motions (explained later).</li>
  <li><code class="language-plaintext highlighter-rouge">"</code>: text-object - This is a text object. i.e. The quotes and everything within it. Other text objects include <code class="language-plaintext highlighter-rouge">(</code>, <code class="language-plaintext highlighter-rouge">{</code> and `’.</li>
  <li><code class="language-plaintext highlighter-rouge">w</code>: motion - Any motion. e.g. <code class="language-plaintext highlighter-rouge">w</code>, <code class="language-plaintext highlighter-rouge">j</code> or <code class="language-plaintext highlighter-rouge">s</code>.</li>
</ul>

<h3 id="explanation">Explanation</h3>

<p>These are normal mode commands. Just type <code class="language-plaintext highlighter-rouge">&lt;ESC&gt;</code> from which ever mode you are to go back to normal mode and execute the commands.<br />
<code class="language-plaintext highlighter-rouge">Operator-pending</code> commands are commands that needs more information before it can execute it’s action. e.g. When you want to delete a text in vim, the command is <code class="language-plaintext highlighter-rouge">d</code>. But how will vim know what you want to delete? Tell it! You have a lot of options. You can use <code class="language-plaintext highlighter-rouge">motions</code> to delete “motionwise”. i.e. <code class="language-plaintext highlighter-rouge">dw</code> to delete word, or <code class="language-plaintext highlighter-rouge">d$</code> to delete to the end of the line. Another option is to specify a text-object.<br />
Now, <code class="language-plaintext highlighter-rouge">text-objects</code> is a fancy word for group of text . It could be a sentence (<code class="language-plaintext highlighter-rouge">s</code>), a paragraph (<code class="language-plaintext highlighter-rouge">p</code>),  or method (<code class="language-plaintext highlighter-rouge">]m</code>). The <code class="language-plaintext highlighter-rouge">"</code> in the above example represents text withing quotes.<br />
What about the <code class="language-plaintext highlighter-rouge">inner (i)|A (a)</code> part? Normally, when you specify a motion, it starts from the position of your cursor. But with <code class="language-plaintext highlighter-rouge">i (inner)</code> and <code class="language-plaintext highlighter-rouge">a (A)</code>, you can perform the action on the whole … motion / text-object. i.e. <code class="language-plaintext highlighter-rouge">iw</code> means inner word, excluding spaces around. It works for both text-objects and motions. Let me show you the difference.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">before</th>
      <th style="text-align: left">insert</th>
      <th style="text-align: left">after</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">"hello |world</code>”</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ds</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">hello |</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">hello | world</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">dis</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">|</code></td>
    </tr>
  </tbody>
</table>

<p>Without <code class="language-plaintext highlighter-rouge">i</code> or <code class="language-plaintext highlighter-rouge">a</code>, the action is executed starting from your cursor position. With <code class="language-plaintext highlighter-rouge">i</code> or <code class="language-plaintext highlighter-rouge">a</code>, context is included.</p>

<h3 id="step-by-step-guide">Step by step guide</h3>

<ul>
  <li>Open vim: <code class="language-plaintext highlighter-rouge">vim file.txt</code>.</li>
  <li>Go to insert mode: <code class="language-plaintext highlighter-rouge">i</code>.</li>
  <li>Type some text: <code class="language-plaintext highlighter-rouge">"Hello Vim World!"</code>.</li>
  <li>Go back to normal mode: <code class="language-plaintext highlighter-rouge">\&lt;ESC\&gt;</code>.</li>
  <li>Execute command: <code class="language-plaintext highlighter-rouge">ci"</code>.</li>
</ul>

<h3 id="examples">Examples</h3>

<p>I like examples. So, let me give you some:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ci"</code>: Change text <code class="language-plaintext highlighter-rouge">in</code>side quotes.</li>
  <li><code class="language-plaintext highlighter-rouge">yis</code>: Yank / copy whole sentence.</li>
  <li><code class="language-plaintext highlighter-rouge">di(</code>: Delete everything inside the parentheses.</li>
  <li><code class="language-plaintext highlighter-rouge">diw</code>: delete the entire word.</li>
  <li><code class="language-plaintext highlighter-rouge">=i}</code>: Format everything between braces (<code class="language-plaintext highlighter-rouge">{}</code>).</li>
  <li><code class="language-plaintext highlighter-rouge">saa"(</code> Using sandwich plugin, wrap the things inside the quotes with parentheses.  i.e. “hello world” =&gt; <code class="language-plaintext highlighter-rouge">saa")</code> =&gt; (“hello world”).</li>
</ul>

<h4 id="over-here">Over Here</h4>
<p>You can use <code class="language-plaintext highlighter-rouge">/</code> also. e.g. <code class="language-plaintext highlighter-rouge">d/</code>. When you timepress <code class="language-plaintext highlighter-rouge">/</code>, it will open the search area for you to type something to search. When you click enter, it will perform the action  from your current cursor position to the first result of your search. This one was unexpected for me. I knew about using <code class="language-plaintext highlighter-rouge">n</code> but not <code class="language-plaintext highlighter-rouge">/</code>. Wonders of vim 😀</p>

<h2 id="conclusion">Conclusion</h2>

<p>At the end of the day, if you don’t practice / try these commands, you will forget it all. But if you keep practising, it will become second nature!<br />
If you found the post informative, please tell me on mastodon or twitter. Links below. Also, feedback and suggestions are welcomed.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="vim" /><category term="neovim" /><category term="vim" /><summary type="html"><![CDATA[I made an awesome discovery recently on vim. It was by accident. So, here is the jist]]></summary></entry></feed>