<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://arfs6.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arfs6.me/" rel="alternate" type="text/html" /><updated>2023-12-07T08:22:21+00:00</updated><id>https://arfs6.me/feed.xml</id><title type="html">Abdulqadir Ahmad</title><subtitle>Abdulqadir Ahmad - Programmer, Blogger</subtitle><author><name>Abdulqadir Ahmad</name></author><entry><title type="html">Finding the power set of a set using python</title><link href="https://arfs6.me/blog/python/2023/12/03/finding-powwer-set-in-python.html" rel="alternate" type="text/html" title="Finding the power set of a set using python" /><published>2023-12-03T16:21:00+00:00</published><updated>2023-12-03T16:21:00+00:00</updated><id>https://arfs6.me/blog/python/2023/12/03/finding-powwer-set-in-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/12/03/finding-powwer-set-in-python.html"><![CDATA[<p>My friend and I were solving some math questions and we had to find the power set of a set with 14 elements. According to <a href="https://en.wikipedia.org/wiki/Power_set">wikipedia</a>, the power set of a set S is the set of all subsets of S, including the empty set and S itself.</p>

<p>Now, to find the number of elements (I.E. subsets) in the power set, we find 2 to the nth power, where n is the number of elements in the main set. Since our set has 14 elements, she decided to calculate 2 to the nth power manually. It took her a reasonable amount of time to calculate just the number of elements, which is 16384.</p>

<p>At that point, I knew this is no work for a human, and my brain began to figure out how to write it in python. This blog post is me sharing my solution with you.</p>

<h2 id="the-solution">The Solution</h2>

<p>While I was learning set, chat GPT told me something about using bits to find all the possible subsets of a set. At the time, it flew over my head, but after my brain decided to solve this problem, it remembered it. I think it will be better explaining it with an example.</p>

<h3 id="example">Example</h3>

<p>Given a set {1, 2, 3}, let’s find the power set. The number of elements in our power set is going to be 8.</p>

<table>
  <thead>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Elements</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>001</td>
      <td>1</td>
      <td>{3}</td>
    </tr>
    <tr>
      <td>010</td>
      <td>2</td>
      <td>{2}</td>
    </tr>
    <tr>
      <td>011</td>
      <td>3</td>
      <td>{2, 3}</td>
    </tr>
    <tr>
      <td>100</td>
      <td>4</td>
      <td>{1}</td>
    </tr>
    <tr>
      <td>101</td>
      <td>5</td>
      <td>{1, 3}</td>
    </tr>
    <tr>
      <td>110</td>
      <td>6</td>
      <td>{1, 2}</td>
    </tr>
    <tr>
      <td>111</td>
      <td>7</td>
      <td>{1, 2, 3}</td>
    </tr>
  </tbody>
</table>

<p>From the definition given above, it’s only the empty set that hasn’t been added. Adding it will result to a total of 8 elements. Although the order of the elements aren’t “sequential”, all the elements have been included.</p>

<h3 id="explanation">Explanation</h3>

<p>We start by finding the number of elements in the power set, which in our case is 8.</p>

<p>Next, we write down 1 to 1 - <em>number of elements in power set</em> in binary.</p>

<p>Then add zeros to the beginning of all your binary digits (bits) so that they will have equal number of bits. In our case, the largest number had three bits, so we added bits at the beginning of all the other numbers to make it three bits.</p>

<p>For each number, represent each element of your main set with a position in your binary numbers. If the bit corresponding to the number is on (1), add the element to your subset. In our case, 1 was represented by the first bit, 2 by the second bit and 3 by the third bit. For example, our first binary number is <em>001</em>. Only the third bit is on, so we only added <em>3</em>.</p>

<p>From here, the only missing element in your power set is the empty set. So, add it!</p>

<p>Now, let’s figure out how to do this in</p>

<h2 id="python">python.</h2>

<p>The parts worth mentioning in the python script are <a href="https://www.geeksforgeeks.org/python-bitwise-operators/">bit wise operators</a> and <a href="https://www.geeksforgeeks.org/generators-in-python/">generators</a>.</p>

<p>I used two bit manipulation operators, <code class="language-plaintext highlighter-rouge">&amp;</code> and <code class="language-plaintext highlighter-rouge">&gt;&gt;</code>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&amp;</code> [<code class="language-plaintext highlighter-rouge">bitwise and</code>]: I used this to check if the last bit is enabled. By matching it with 1, which has all bit off except the last bit, I’ll get 1 only when the last bit is on.</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;&gt;</code> [<code class="language-plaintext highlighter-rouge">bitwise right shift</code>]: I used this to remove the bit I inspected using <code class="language-plaintext highlighter-rouge">&amp;</code>.</li>
</ul>

<p>As for the generators, I used it to get all the position of the enabled bits in the current number.</p>

<p>Enough english,</p>

<h3 id="here-is-the-python-code">here is the python code:</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env python
# -*- coding: utf-8 -*-
</span>

<span class="k">def</span> <span class="nf">_getPositions</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">A generator that returns the position of all enabled bits.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">num</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">num</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">idx</span>
        <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
        <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="k">def</span> <span class="nf">getPowerSet</span><span class="p">(</span><span class="n">mainSet</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Find the power set of @mainSet
    parameters:
    - mainSet: A list containing all the elements of the set to find it</span><span class="sh">'</span><span class="s">s power set
    Returns:
    - None: Invalid argument
    - list: A list containing all the possible subsets of @mainSet. The subsets are sets.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mainSet</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span>
    <span class="n">powerSet</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nb">max</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span> <span class="nf">len</span><span class="p">(</span><span class="n">mainSet</span><span class="p">)</span>
    <span class="n">powerSet</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">set</span><span class="p">())</span>  <span class="c1"># Empty set
</span>    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">max</span><span class="p">):</span>
        <span class="n">subSet</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nf">_getPositions</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
            <span class="n">subSet</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">mainSet</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
        <span class="n">powerSet</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">subSet</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">powerSet</span>


<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Begin code execution</span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hi. I am here to find the power set of set for you.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rawSet</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Type the elements of your set, separated by comma (,): </span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">rawSet</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No set supplied, exiting...</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">mainSet</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">num</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">rawSet</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)]</span>
    <span class="n">powerSet</span> <span class="o">=</span> <span class="nf">getPowerSet</span><span class="p">(</span><span class="n">mainSet</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">powerSet</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total number of sets:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">powerSet</span><span class="p">))</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="finding-the-power-set">Finding the power set</h2>

<p>After finishing the code, we ran it and passed the set with 14 values. It took some seconds before all the output was displayed, and it was over 2000 lines. Should I show you? Okay, I have uploaded the output to a gist, and here is the link: <a href="https://gist.github.com/Arfs6/1efafc44fa97f0ec6ecfb7697ba37504">https://gist.github.com/Arfs6/1efafc44fa97f0ec6ecfb7697ba37504</a></p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[My friend and I were solving some math questions and we had to find the power set of a set with 14 elements]]></summary></entry><entry><title type="html">Disassembling exception handling in python</title><link href="https://arfs6.me/blog/python/2023/11/26/disassembling-exception-handling-in-python.html" rel="alternate" type="text/html" title="Disassembling exception handling in python" /><published>2023-11-26T14:00:00+00:00</published><updated>2023-11-26T14:00:00+00:00</updated><id>https://arfs6.me/blog/python/2023/11/26/disassembling-exception-handling-in-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/11/26/disassembling-exception-handling-in-python.html"><![CDATA[<p>If you have written some code in python, then you have most probably met an exception. Exceptions occurs when an operation fails. Example, converting <em>one</em> to an integer.</p>

<p>When an exception is raised and it isn’t handled, python displays an error to the console and exits the program. As a user, I wouldn’t want an app to crash just because I supplied the wrong input. This is where exception handling comes.</p>

<h2 id="introducing-the-try-block">Introducing the <code class="language-plaintext highlighter-rouge">try</code> block</h2>

<p><code class="language-plaintext highlighter-rouge">try</code> blocks are used to handle exceptions in python. It has three clauses:</p>

<ol>
  <li><a href="#except"><code class="language-plaintext highlighter-rouge">except</code></a></li>
  <li><a href="#else"><code class="language-plaintext highlighter-rouge">else</code></a></li>
  <li><a href="finally"><code class="language-plaintext highlighter-rouge">finally</code></a></li>
</ol>

<p>The code in <code class="language-plaintext highlighter-rouge">except</code> and <code class="language-plaintext highlighter-rouge">else</code> blocks executes based on what happens in the <code class="language-plaintext highlighter-rouge">try</code> block and the code in the <code class="language-plaintext highlighter-rouge">finally</code> block always runs.</p>

<p>Now, let me use an example to explain what each blocks does.</p>

<p>Given the following code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p>What will happen when I type twenty? Let’s run it and see what we’ll get:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How old are you? Twenty
Traceback (most recent call last):
  File "/tmp/main.py", line 1, in &lt;module&gt;
    age = int(input("How old are you? "))
ValueError: invalid literal for int() with base 10: 'Twenty'
</code></pre></div></div>

<p>This isn’t something we will want our users to see. A better thing is something like <code class="language-plaintext highlighter-rouge">Have no idea what Twenty is.</code>.</p>

<p>Now, to be able to handle an exception, we need to put the code that can raise the exception in a <code class="language-plaintext highlighter-rouge">try</code> block. E.G.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p>Now, let’s run this code and see what will happen:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  File "/tmp/main.py", line 2
    age = int(input("How old are you? "))
SyntaxError: expected 'except' or 'finally' block
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">try</code> block must  have at least one <a href="#except"><code class="language-plaintext highlighter-rouge">except</code></a> or a <a href="#finally"><code class="language-plaintext highlighter-rouge">finally</code></a> block.</p>

<p>This ties to the next section:</p>

<h2 id="except">except</h2>

<p>The most basic form of an <code class="language-plaintext highlighter-rouge">except</code> statement is <code class="language-plaintext highlighter-rouge">except:</code>, for example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
<span class="k">except</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">I think you didn</span><span class="sh">'</span><span class="s">t type a number. Try again!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Let’s try and recreate the error again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I think you didn't type a number. Try again!
</code></pre></div></div>

<p>It worked! And it smells! Let me explain.</p>

<p>The above <code class="language-plaintext highlighter-rouge">except</code> statement doesn’t specify which exception it’s handles. This has the effects of passing all unhandled exceptions to it. Which is something you will not like. Why? some exceptions are meant to be handled differently. For example, when you hit ctrl+c while the above code is waiting for user input, python raises a <code class="language-plaintext highlighter-rouge">KeyboardInterupt</code> exception. This usually signals the user wants to exit the program, so you are supposed to exit the program not print something.</p>

<p>So, how do we specify which exception to handle? by writing it after <code class="language-plaintext highlighter-rouge">except</code>. How do we know which exception to handle? Usually, I allow python to tell me. If you check the error we got in our first example, the last line is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ValueError: invalid literal for int() with base 10: 'Twenty'
</code></pre></div></div>

<p>The exception to handle in this case is <code class="language-plaintext highlighter-rouge">ValueError</code>.</p>

<p>Let’s handle <code class="language-plaintext highlighter-rouge">ValueError</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
<span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">I think you didn</span><span class="sh">'</span><span class="s">t type a number. Try again!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Hmmmm, our code has stopped smelling.</p>

<p>The last info for this section is, you can have more than one <code class="language-plaintext highlighter-rouge">except</code> blocks under a <code class="language-plaintext highlighter-rouge">try</code> block. So, you can handle <code class="language-plaintext highlighter-rouge">KeyboardInterupt</code> too if you like.</p>

<h2 id="else">else</h2>

<p>The code in the <code class="language-plaintext highlighter-rouge">else</code> block depends on the code in the <code class="language-plaintext highlighter-rouge">try</code> block to run without an exception. In our case, we can do something with the age variable. E.G.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
<span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">I think you didn</span><span class="sh">'</span><span class="s">t type a number. Try again!</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Now I know you</span><span class="sh">'</span><span class="s">re</span><span class="sh">"</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="sh">"</span><span class="s">years old.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, let’s run our code and pass it an appropriate value.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How old are you? 20
Now I know you're 20 years old.
</code></pre></div></div>

<h2 id="finally">finally</h2>

<p>The <code class="language-plaintext highlighter-rouge">finally</code> block always executes. In our case, we can print a goodbye to our user.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">age</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">How old are you? </span><span class="sh">"</span><span class="p">))</span>
<span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">I think you didn</span><span class="sh">'</span><span class="s">t type a number. Try again!</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Now I know you</span><span class="sh">'</span><span class="s">re</span><span class="sh">"</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="sh">"</span><span class="s">years old.</span><span class="sh">"</span><span class="p">)</span>
<span class="k">finally</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Thank you for sailing with us.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Let’s try with an appropriate input:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How old are you? 20
Now I know you're 20 years old.
Thank you for sailing with us.
</code></pre></div></div>

<p>OK… Let’s give it <em>Twenty</em> now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How old are you? Twenty
I think you didn't type a number. Try again!
Thank you for sailing with us.
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This is an introduction to exception handling in python. Lots of things has been ignored intensionally.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[As a user, I wouldn't want an app to crash just because I supplied the wrong input]]></summary></entry><entry><title type="html">Why I started programming</title><link href="https://arfs6.me/blog/programming/2023/11/24/why-i-started-programming.html" rel="alternate" type="text/html" title="Why I started programming" /><published>2023-11-24T07:55:00+00:00</published><updated>2023-11-24T07:55:00+00:00</updated><id>https://arfs6.me/blog/programming/2023/11/24/why-i-started-programming</id><content type="html" xml:base="https://arfs6.me/blog/programming/2023/11/24/why-i-started-programming.html"><![CDATA[<p>I started learning python February 2022 using an awesome book - Python Crash Course. Why? I couldn’t read financial chart, candle stick charts to be specific. This is how it looks like: <a href="https://commons.wikimedia.org/wiki/File:Candlestick_Chart_in_MetaTrader_5.png#/media/File:Candlestick_Chart_in_MetaTrader_5.png">https://commons.wikimedia.org/wiki/File:Candlestick_Chart_in_MetaTrader_5.png#/media/File:Candlestick_Chart_in_MetaTrader_5.png</a>. In case you don’t know, I am blind.</p>

<p>Why python? Because I have seen some solutions built with python, and I heard you can build almost anything in python.</p>

<p>The interesting thing is, I have learnt enough python to build an app that will make candle stick charts accessible, but I haven’t started building it nor am I planning to start anytime soon. When I remember about this, I feel there is a hole I need to block before I can say learning programming is a success.</p>

<p>The main reason why I haven’t built it is a shift in priority and time. <a href="https://accessibilityhub.tech">Accessibility hub</a> is more important than the candle stick reader, and I don’t have time to do both. School is the culprit here.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="programming" /><summary type="html"><![CDATA[I couldn't read financial chart, candle stick charts to be specific]]></summary></entry><entry><title type="html">Building The YALMA App</title><link href="https://arfs6.me/blog/python/2023/11/22/building-the-yalma-app.html" rel="alternate" type="text/html" title="Building The YALMA App" /><published>2023-11-22T15:58:00+00:00</published><updated>2023-11-22T15:58:00+00:00</updated><id>https://arfs6.me/blog/python/2023/11/22/building-the-yalma-app</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/11/22/building-the-yalma-app.html"><![CDATA[<p>The goal of this blog post is to guide you to build an app in python. Some people get scared when they hear “app”, don’t worry, I don’t think the app will pass 100 lines.</p>

<h2 id="introducing-yalma">Introducing YALMA</h2>

<p>YALMA (Yet Another Link Manager App) is a link manager build with python. Check this page out for an example of how it looks like; <a href="https://gist.github.com/Arfs6/60e0539ab49d83e12c5bf6e7c401fefb">https://gist.github.com/Arfs6/60e0539ab49d83e12c5bf6e7c401fefb</a>. The main aim of the app is to accept and store links. For example, you can store the above link in the app and give it the name “YALMA Example”. Then when next you need it, you can just open YALMA and ask for it.</p>

<h2 id="resources">Resources</h2>

<p>You might need some resources to be able to do some steps. I don’t think me writing it will be a good idea, because of time, and there are lots of excellent resources out there. So, what I am planning to do is to get links to those resources and add it to each step.</p>

<h2 id="steps">Steps</h2>

<p>All the solution to the steps should be in one python file.</p>

<h3 id="step-1---welcome-your-user">Step 1 - Welcome your user</h3>

<p>A nice welcome message to your user is a plus always. Welcome your user and explain briefly what YALMA is:</p>

<ol>
  <li>Display <code class="language-plaintext highlighter-rouge">YALMA</code> followed by a new line. Use <em>tab</em> character to shift it a little to the right.</li>
  <li>Display a brief explanation of what <strong>YALMA</strong> is: <code class="language-plaintext highlighter-rouge">A link manager.</code></li>
</ol>

<h4 id="example">Example</h4>

<blockquote>
  <p>This is what you should get when you run your code.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	YALMA
A link manager.
</code></pre></div></div>

<blockquote>
  <p>Tip: A tab character is represented by <code class="language-plaintext highlighter-rouge">\t</code> in python, It should be in a string.</p>
</blockquote>

<h3 id="step-2---create-link">Step 2 - Create link</h3>

<p>Let’s write the code to create a link:</p>

<ol>
  <li>Create a function <code class="language-plaintext highlighter-rouge">create_link</code>.</li>
  <li>It should prompt the user for a name for the link.</li>
  <li>It should prompt the user for the link to store.</li>
  <li>Store both the name and the link provided above in a dictionary. The key should be <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">url</code> for the name and link respectively.</li>
  <li>Return the created dictionary.</li>
  <li>For testing purposes, call the function and print what the function returns. <em>This will be removed later</em>.</li>
</ol>

<h4 id="example-1">Example</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	YALMA
A link manager.
What is the name of the link? Abdulqadir Ahmad's website
What is the URL (link) of the link? https://arfs6.me
{'name': "Abdulqadir Ahmad's website", 'url': 'https://arfs6.me'}
</code></pre></div></div>

<h3 id="step-3---showing-links">Step 3 - Showing links</h3>

<p>Now that we have a function that creates a link, let’s create a function that displays all our links.</p>

<ol>
  <li>Create a function <code class="language-plaintext highlighter-rouge">display_links</code> that has one parameter, <code class="language-plaintext highlighter-rouge">links</code> =&gt; <code class="language-plaintext highlighter-rouge">def display_links(links)</code>:
    <ul>
      <li>If the list of links passed is empty, display <code class="language-plaintext highlighter-rouge">No links yet.</code> to the user.</li>
      <li>
        <p>If the list has some elements in it, loop through all the elements and print it in a nice way. Each element is a dictionary created with the <code class="language-plaintext highlighter-rouge">create_link</code> function.</p>

        <p>E.G.</p>

        <p><code class="language-plaintext highlighter-rouge">1. Name: &lt;name_of_link&gt;</code></p>

        <p>`	Link: &lt;url_of_link&gt;`</p>

        <p>Where <code class="language-plaintext highlighter-rouge">1</code> is the number of the link, <code class="language-plaintext highlighter-rouge">&lt;name_of_link&gt;</code> is the name of the link and <code class="language-plaintext highlighter-rouge">&lt;url_of_link&gt;</code> is the url of the link.</p>
      </li>
    </ul>
  </li>
  <li>For testing:
    <ul>
      <li>Delete the testing line of <strong>step 2</strong> that calls <code class="language-plaintext highlighter-rouge">create_link</code>.</li>
      <li>Create an empty list and store it in a variable <code class="language-plaintext highlighter-rouge">links</code>.</li>
      <li>Call <code class="language-plaintext highlighter-rouge">display_links</code> and pass it <code class="language-plaintext highlighter-rouge">links</code> created above.</li>
      <li>Call <code class="language-plaintext highlighter-rouge">create_link</code> and append what it returns to your <code class="language-plaintext highlighter-rouge">links</code> list created above.</li>
      <li>Call <code class="language-plaintext highlighter-rouge">display_links</code> from above and pass it the <code class="language-plaintext highlighter-rouge">links</code> variable.</li>
      <li>Repeate the above two instructions.</li>
    </ul>
  </li>
</ol>

<h4 id="example-2">Example</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	YALMA
A link manager.
No links yet.
What is the name of the link? Abdulqadir Ahmad's website
What is the URL (link) of the link? https://arfs6.me
1. Name: Abdulqadir Ahmad's website
	Link: https://arfs6.me
What is the name of the link? Chat GPT
What is the URL (link) of the link? https://chat.openai.com
1. Name: Abdulqadir Ahmad's website
	Link: https://arfs6.me
2. Name: Chat GPT
	Link: https://chat.openai.com
</code></pre></div></div>

<h2 id="have-feedback--questions">Have Feedback / Questions?</h2>

<p>If you no where to get me, <strong>do not hesitate</strong> to contact me. If you don’t, there are useful links at the bottom of this page.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[The goal of this blog post is to guide you to build an app in python. Some people get scared when they hear “app”, don’t worry, I don’t think the app will pass 100 lines.]]></summary></entry><entry><title type="html">A To Z In Vim</title><link href="https://arfs6.me/blog/vim/2023/11/17/a-to-z-in-vim-normal-mode.html" rel="alternate" type="text/html" title="A To Z In Vim" /><published>2023-11-17T17:52:00+00:00</published><updated>2023-11-17T17:52:00+00:00</updated><id>https://arfs6.me/blog/vim/2023/11/17/a-to-z-in-vim-normal-mode</id><content type="html" xml:base="https://arfs6.me/blog/vim/2023/11/17/a-to-z-in-vim-normal-mode.html"><![CDATA[<p>In this post, I’ll be writing what each alphabet on my keyboard means in normal mode of vim. Instead of going from <strong>a</strong> to <strong>z</strong>, I’ll follow the layout of my keyboard (quarti).</p>

<p>I’ll be writing this from memory, no help pages, no googling! I don’t know all the upper case commands, so this list will contain only lower case characters.</p>

<ol>
  <li><strong>q</strong>: Records a macro. You must give it a register (character) to store the macro in it.</li>
  <li><strong>w</strong>: Go to the next <code class="language-plaintext highlighter-rouge">word</code>.</li>
  <li><strong>e</strong>: Go to the end of the current word.</li>
  <li><strong>r</strong>: Replace the character under your cursor with another one. Type the replacement after typing the command.</li>
  <li><strong>t</strong>: Till next occurrence of a character. Must type character after command.</li>
  <li><strong>y</strong>: Copy / Yank. Must give text object or motion to copy.</li>
  <li><strong>u</strong>: Undo.</li>
  <li><strong>i</strong>: Switch to insert mode.</li>
  <li><strong>o</strong>: Create a new line below the focused line and switch to insert mode.</li>
  <li><strong>p</strong>: Paste.</li>
  <li><strong>a</strong>: Switch to insert mode with cursor after the currently focused character.</li>
  <li><strong>s</strong>: Delete the current character and switch to insert mode.</li>
  <li><strong>d</strong>: Delete. Must pass text object or motion to delete.</li>
  <li><strong>f</strong>: Go to the previous occurrence of a character. Must type character after command.</li>
  <li><strong>g</strong>: Like a modifier. Characters typed after it has meaning. E.G. <code class="language-plaintext highlighter-rouge">gg</code> move to top. Mostly motion related commands.</li>
  <li><strong>h</strong>: Previous character.</li>
  <li><strong>j</strong>: Next line.</li>
  <li><strong>k</strong>: previous line.</li>
  <li><strong>l</strong>: Next character.</li>
  <li><strong>z</strong>: Like <strong>g</strong>.</li>
  <li><strong>x</strong>: Delete the character under the cursor.</li>
  <li><strong>c</strong>: Deletes a text a switch to insert mode. Must pass text object or motion to delete.</li>
  <li><strong>v</strong>: Switch to visual mode.</li>
  <li><strong>b</strong>: Go to the start of the currently focused word. If already at start, go to the start of the previous word.</li>
  <li><strong>n</strong>: Go to the next search result.</li>
  <li><strong>m</strong>: Mark cursor position. Must specify register (character) to store mark in. Upper case registers are global and numeric registers are overriding at vim startup.</li>
</ol>

<h2 id="impressive">Impressive?</h2>

<p>It took me months to reach this point. This twitter <a href="https://twitter.com/arf_s6/status/1632059902033051650?t=m_jcyAFRlWkS06MfzOGU9Q&amp;s=19">tweet</a> was like weeks after I started.</p>

<p>I found new commands by mistake, I found other commands by reading. It just compiled over time and now, it is a muscle memory.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="vim" /><summary type="html"><![CDATA[I'll be writing this from memory, no help pages, no googling!]]></summary></entry><entry><title type="html">Getting started with python</title><link href="https://arfs6.me/blog/python/2023/11/14/getting-started-with-python.html" rel="alternate" type="text/html" title="Getting started with python" /><published>2023-11-14T13:14:00+00:00</published><updated>2023-11-14T13:14:00+00:00</updated><id>https://arfs6.me/blog/python/2023/11/14/getting-started-with-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/11/14/getting-started-with-python.html"><![CDATA[<p>My goal in this article is to get you to write some python code. I am a big believer in learning by doing, and this article is written with that in mind.</p>

<h2 id="project">Project</h2>

<p>The goal is to create a score resolver. It should request the user to enter his / her score and tell the user what grade he / she has.</p>

<h2 id="requirements">Requirements</h2>

<p>You can write your python code anywhere, but you need the python interpreter to be able to run the code. The python interpreter reads your code and instructs the computer on what to do.</p>

<p>The app I’ll suggest is pydroid. It is available on Google playstore, I’m not sure of Apple app store.</p>

<p>Pydroid has an interface for writing code, running code and even an interactive code execution with python.</p>

<h2 id="python-repl">Python repl</h2>

<p>When you click interpreter in pydroid, you’re getting the python repl. It has three greater than sign (<code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;</code>) then a cursor. The greater than sign is called a prompt. When you type in a command and hit enter, the interpreter executes your command and returns the result. Then it displays a new prompt, waiting for your next command.</p>

<h2 id="steps">Steps</h2>

<p>Computers are stupid by design. So, in order to instruct it, you need to tell it everything in details. You can’t just say “Go and get me a coffee”. You’ll have to tell it how to do it and when to do it. e.g.</p>

<ul>
  <li>Stand up immediately.</li>
  <li>Walk straight 10 feets.</li>
  <li>Get a cup from …</li>
</ul>

<p>You get my point? Now, our goal is to write a program that figures out what grade a score is. Let’s write down our instructions in english and then figure out how to replicate it in python.</p>

<ol>
  <li>Ask the user for his / her score.</li>
  <li>Store what the user wrote.</li>
  <li>Fine the grade corresponding to his / her score.</li>
  <li>Display the corresponding grade.</li>
</ol>

<p>As you can see, almost all the steps are detailed, except step 3. We need to tell the stupid computer how to get a grade from a score.</p>

<p>How about we use greater than and less than? E.G. When the score is less than 30, we know it is an F.</p>

<p>Expanding step 3, we’ll have:</p>

<p>Let the number the user entered be <code class="language-plaintext highlighter-rouge">score</code>.</p>

<ul>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 0 and it is less than 30, we display <em>F</em>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 30 and it is less than 40, we display <em>E</em>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 40 and it is less than 50, we display <em>D</em>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 50 and it is less than 60, we display <em>C</em>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 60 and it is less than 70, we display <em>B</em>.</li>
  <li>If <code class="language-plaintext highlighter-rouge">score</code> is greater than or equal to 70 and it is less than or equal to 100, we display <em>A</em>.</li>
</ul>

<p>Let’s get started!</p>

<h2 id="displaying-output">Displaying output</h2>

<p>You might be wondering, according to the steps detailed above, we should be starting with accepting input. Yes, you’re right. I decided to start with the last item in our list because it has the less concepts.</p>

<h3 id="hello-python-world">Hello Python World!</h3>

<p>Open pydroid. At the top right, there is a button with three dashes. Click it and click interpreter. You will see something like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="o">|</span>
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">|</code> represents your cursor.</p>

<p>Now, type <code class="language-plaintext highlighter-rouge">print("Hello Python World!")</code>. Now, the interpreter will look like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello Python World!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>You have just typed an instruction that python will interpret and tell the computer what to do. Now, hit enter to execute it. You’ll have something like this now:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello Python World!</span><span class="sh">"</span><span class="p">)</span>
<span class="n">Hello</span> <span class="n">Python</span> <span class="n">World</span><span class="err">!</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>If your output doesn’t look like mine, or if you get an error, compare your code with mine. Scrutinize it, character by character.</p>
</blockquote>

<h3 id="explanation">Explanation</h3>

<p>We can break the above code into two:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">print()</code></li>
  <li><code class="language-plaintext highlighter-rouge">"Hello Python World!"</code></li>
</ul>

<p>The first one is a callable object. Everything in python is an object (My laptop is an object), and each object has it’s own property (My laptop has a typing property. Which means, I can type using it). When you call a callable object, it does something for you and returns another thing. You can also give a value to a callable to work with.</p>

<p>To call a callable, you write the name of the callable (<code class="language-plaintext highlighter-rouge">print</code>) followed by a pair of brackets (<code class="language-plaintext highlighter-rouge">(</code> and <code class="language-plaintext highlighter-rouge">)</code>). E.G. To call the <code class="language-plaintext highlighter-rouge">print</code> callable, you type <code class="language-plaintext highlighter-rouge">print()</code>. Let’s try it!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">()</span>

<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>There is no space between the callable and the pair of brackets.</p>
</blockquote>

<p>As you can see, we got an empty line. That is what the print function does when you don’t give anything to display.</p>

<p>To give <code class="language-plaintext highlighter-rouge">print</code> what to display, you write it between the brackets. Let’s try it!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">)</span>
<span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;stdin&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="sh">'</span><span class="s">Hello</span><span class="sh">'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
<span class="o">&gt;&gt;&gt;</span> 
</code></pre></div></div>

<blockquote>
  <p>The above text might differ slightly from yours, don’t worry as long as the last line is a <code class="language-plaintext highlighter-rouge">NameError</code>.</p>
</blockquote>

<p>We got an error!!! If you compare the first successful print command and this one, you’ll see that we didn’t use quotation marks in this one.</p>

<p>The problem is, python doesn’t know what <code class="language-plaintext highlighter-rouge">Hello</code> means. It knows <code class="language-plaintext highlighter-rouge">print</code> is a callable object, but it doesn’t know what <code class="language-plaintext highlighter-rouge">Hello</code> is.</p>

<p>We know, <code class="language-plaintext highlighter-rouge">Hello</code> is a text, how can we tell pyton? By quoting the text. If you quote the text, python will know it is a text. Let’s try it!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span><span class="p">)</span>
<span class="n">Hello</span>
<span class="o">&gt;&gt;&gt;</span> 
</code></pre></div></div>

<p>Now that you know how to print <code class="language-plaintext highlighter-rouge">Hello World!</code>, try printing:</p>

<ul>
  <li><strong>Abdulqadir Ahmad</strong>.</li>
  <li>Your name.</li>
</ul>

<blockquote>
  <p>If / when you get an error, read the concept again and make sure you’re using the right brackets and <code class="language-plaintext highlighter-rouge">print</code>. <code class="language-plaintext highlighter-rouge">print</code> is not the same with <code class="language-plaintext highlighter-rouge">Print</code>. Python is case sensitive.</p>
</blockquote>

<h2 id="storing-data">Storing data</h2>

<blockquote>
  <p>To be continued.</p>
</blockquote>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[My goal in this article is to get you to write some python code. I am a big believer in learning by doing]]></summary></entry><entry><title type="html">They robbed a blind man</title><link href="https://arfs6.me/blog/blind/2023/11/13/they-robbed-a-blind-man.html" rel="alternate" type="text/html" title="They robbed a blind man" /><published>2023-11-13T18:09:00+00:00</published><updated>2023-11-13T18:09:00+00:00</updated><id>https://arfs6.me/blog/blind/2023/11/13/they-robbed-a-blind-man</id><content type="html" xml:base="https://arfs6.me/blog/blind/2023/11/13/they-robbed-a-blind-man.html"><![CDATA[<p>One of my friend was recently robbed by some one close to him. This post isn’t meant to critisize him, but to learn from the incident. Let’s say his name is Brian.</p>

<h2 id="trust">Trust</h2>

<p>Brian is a student at a university, he lives in the school hostel.</p>

<p>His room mates often use his phone for many reasons. We blind people depend on sighted people for somethings like describing images and a lot more. So, his room mates knew how to remove <a href="https://en.wikipedia.org/wiki/Screen_reader">talk back</a> from his phone and use it. Further more, Brian has given them his debit card on several occasions to withdraw cash for him.</p>

<h2 id="the-act">The act</h2>

<p>A new semester began and Brian was about to pay for his school fees and hostel. The money was sent to his account. I can’t remember how exactly, but someone got access to his phone, and bought NGN 10,000 airtime to a phone number and transfered all the money left to an account.</p>

<p>We’re suspecting his room mates because it’s not everybody that knows how to remove talk back from a phone. The bad actor was able to reset his bank app passcode, which I guess the bad actor doesn’t know. We know that because of the OTP message that was sent to his phone. As for the transfer pin, it’s the same with his debit card. So, it should be someone who knows how to disable talkback and knows his transfer pin.</p>

<h2 id="lessons">Lessons</h2>

<p>Let’s share this into two - one for blind people and another for sighted people.</p>

<h3 id="for-blind-people">For Blind People</h3>

<p>I think the most important lesson is to increase the security of your phone. Like, my phone’s screen is black and you can’t turn off the screen reader when the phone is locked. This will make it extremely difficult for bad actors to take my phone and turn off the screen reader. Other things you can do is to have separate passwords for your things. A separate password for your phone, debit card, bank app, transfer pin. Of course this means having to remember all, but it is better than seeing your account cleared. For screen reader users, I think the most important thing to do is to make disabling screen readers extremely difficult without your authorization.</p>

<p>Another lesson is not to trust everybody with your debit card pin. I try as much as possible to avoid using it, but when I have to, I am extra cautious. I mostly make transfers.</p>

<h3 id="for-sighted-people">For Sighted People</h3>

<p>I know someone would be like, why would someone rob a blind person. Well, there are good people and there are bad people. I have met awesome people and cruel people. That is just how live is. The lesson here is don’t do what you wouldn’t like it to be done to you. Do not steal someones money.</p>

<p>And, this guy used a different phone number / account number for the transfers, so he definitely had a “friend”. If you can support someone to do something like this, what makes you think he / she won’t do it to you?</p>

<h2 id="can-you-help">Can you help?</h2>

<p>If you can help Brian with anything, please don’t hesitate to send me a dm anywhere.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="blind" /><summary type="html"><![CDATA[The person transfered everything in his bank]]></summary></entry><entry><title type="html">My math workstation</title><link href="https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation.html" rel="alternate" type="text/html" title="My math workstation" /><published>2023-11-05T12:27:00+00:00</published><updated>2023-11-05T12:27:00+00:00</updated><id>https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation</id><content type="html" xml:base="https://arfs6.me/blog/latex/vim/nvda/2023/11/05/my-math-workstation.html"><![CDATA[<p>As a computer science student, I take courses with calculations in it. I am in the process of building my “workstation” or “schoolstation” for learning and writing such courses. This post is for me to share how my work station is, It might be useful for other people who are also trying to figure out what tools to use.</p>

<p>I’ll be dividing this post into three:</p>

<ol>
  <li><a href="#writing">Writing</a></li>
  <li><a href="#transpiling">Transpiling</a></li>
  <li><a href="#reading">Reading</a></li>
</ol>

<h2 id="writing">Writing</h2>

<p>This step involves writing the LaTeX document. I started using <a href="https://github.com/tsengwoody/Access8Math">access8math</a> for writing the TeX document. With time, I gradually moved to <a href="https://neovim.io">neovim</a> for the writing part, and I am now fully using it to write my LaTeX “code”.  Neovim had a lot more to offer.</p>

<p>I use neovim in <a href="https://learn.microsoft.com/en-us/windows/wsl/about">wsl</a>, but it works in windows as well. I just tend to spend more time in wsl. If you’re interested in neovim and want to try it out, here is it’s installation guide: <a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">https://github.com/neovim/neovim/wiki/Installing-Neovim</a>. I don’t know which tutorial to suggest, I used the builtin vim tutor.</p>

<p>Here are the plugins and features of neovim I use:</p>

<ul>
  <li><strong><a href="https://vim.fandom.com/wiki/Using_marks">Marks</a></strong>: This lets me to mark a section in the file I am editing. It allows me to jump from one part of the document to another. E.g. From the question to the solution.</li>
  <li>Jump to next or previous method. This is a command in vim that jumps to next or previous methods. In LaTeX document, it will jump to next or previous environment. E.g. <code class="language-plaintext highlighter-rouge">\begin{equation}</code> environment. This is very useful when navigating the file. <code class="language-plaintext highlighter-rouge">[m</code> jumps to previous environment and <code class="language-plaintext highlighter-rouge">]m</code> jumps to next environment.</li>
  <li><strong><a href="https://github.com/lervag/vimtex">vimtex</a></strong>: This is a plugin that adds better support for LaTeX in vim. It has a lot of features. E.g. You can use <code class="language-plaintext highlighter-rouge">%</code> to jump between the start and end of an environment.</li>
  <li>A custom script that transpiles (compiles) my LaTeX document to HTML when I save the file. The script is very simple, it just calls <code class="language-plaintext highlighter-rouge">pandoc</code> and passes the appropriate arguments for the conversion. I would write a different blog post on how to do that.</li>
</ul>

<p>This aren’t all the features I use, I’ll add more with time.</p>

<h2 id="transpiling">Transpiling</h2>

<p>The two formats I usually transpile LaTeX to are pdf and HTML. As for the pdf, I use pdflatex, which comes with most LaTeX distributions.You can get a LaTeX distribution here: <a href="https://www.latex-project.org/get/">https://www.latex-project.org/get/</a>. As for the HTML conversion, I use pandoc. Pandoc is a document converter. You can install one by visiting this page and following the instruction as per your operating system: <a href="https://pandoc.org/installing.html">https://pandoc.org/installing.html</a></p>

<p>Both pandoc and pdflatex are command line tools. Here are the commands I use to transpile to HTML:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc <span class="nt">-f</span> latex <span class="nt">-t</span> html <span class="nt">--mathml</span> <span class="nt">-o</span> file.html file.tex
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">file.tex</code> is the LaTeX file and <code class="language-plaintext highlighter-rouge">file.html</code> is the file to store the HTML output in. The <code class="language-plaintext highlighter-rouge">--mathml</code> tells pandoc to convert it to mathml, you can use <code class="language-plaintext highlighter-rouge">--mathjax</code> to convert it to mathjax.</p>

<p>Here is the command I use to convert to pdf:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdflatex file.tex
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">file.tex</code> is the LaTeX file. On successful compilation, <code class="language-plaintext highlighter-rouge">pdflatex</code> stores the pdf output in <code class="language-plaintext highlighter-rouge">file.pdf</code>. It changes the extension of the input file from <code class="language-plaintext highlighter-rouge">.tex</code> to <code class="language-plaintext highlighter-rouge">.pdf</code>. I haven’t figured out what to do when there is an error in my LaTeX, I just abort the process by pressing ctrl+d and going back to neovim to figure it out.</p>

<h2 id="reading">Reading</h2>

<p>This section might not be useful to sighted people. As a blind person, I have to figure out how to read the math I wrote. While writing, I read the LaTeX text directly. After I am done writing, I usually want to cross check what I wrote. For this step, I convert the LaTeX document to HTML, then open it in my browser (Microsoft edge for now).</p>

<p>I am an <a href="https://www.nvaccess.org/">NVDA</a> user. For me to be able to read math in my browser, I need a math player. I have both <a href="https://github.com/tsengwoody/Access8Math">access8math</a> and <a href="https://addons.nvda-project.org/addons/MathCAT.en.html">mathcat</a>. I have been using mathcat lately though.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This is my workstation for LaTeX. I will try to update this post as it evolves. If you have any suggestion or comment, don’t hesitate to contact me using any of the options at the bottom of this page.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="latex" /><category term="vim" /><category term="nvda" /><category term="latex," /><category term="nvda," /><category term="mathml," /><category term="mathjax," /><category term="neovim," /><category term="vim" /><summary type="html"><![CDATA[My LaTeX setup]]></summary></entry><entry><title type="html">Are you blind?</title><link href="https://arfs6.me/blog/blind/2023/10/26/are-you-blind.html" rel="alternate" type="text/html" title="Are you blind?" /><published>2023-10-26T20:55:00+00:00</published><updated>2023-10-26T20:55:00+00:00</updated><id>https://arfs6.me/blog/blind/2023/10/26/are-you-blind</id><content type="html" xml:base="https://arfs6.me/blog/blind/2023/10/26/are-you-blind.html"><![CDATA[<p>I get asked this question often, The two times that stick out are:</p>

<ul>
  <li>This one was when i was in secondary school (or high school).  I and my friends were going somewhere on foot, and they stopped to buy something. As usuall, my white cane was with one of them. Seeing that I know the road and I am already on a pavement (walkway), I decided to continue walking without a guide. A couple of steps later, I bumped into  someone. His first reaction was:
    <blockquote>
      <p>Are you blind?</p>
    </blockquote>

    <p>I was like:</p>

    <blockquote>
      <p>Yes.</p>
    </blockquote>

    <p>After some convincing by my friends, he realised I was truly blind and the table turned on him.</p>
  </li>
  <li>This next one was very recent. I was in a hall with a couple of people, and someway, somehow my phone fell. And then boom someone goes <em>“Are you blind?”</em>. I just ignored the question and continued using my phone. Later the person came to realise, I was truly blind.</li>
</ul>

<h2 id="lesson">Lesson</h2>

<p>Try as much as possible not to ask such questions, especially to someone you don’t know. Blind people exist, and who knows, maybe the person is blind. It doesn’t border me that much, but I’m sure it is going to border some of the people that asked me.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="blind" /><summary type="html"><![CDATA[I get asked this question often. The two times that stick out are]]></summary></entry><entry><title type="html">Joining two absolute paths in python</title><link href="https://arfs6.me/blog/python/2023/10/21/python-os-path-join.html" rel="alternate" type="text/html" title="Joining two absolute paths in python" /><published>2023-10-21T18:55:00+00:00</published><updated>2023-10-21T18:55:00+00:00</updated><id>https://arfs6.me/blog/python/2023/10/21/python-os-path-join</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/10/21/python-os-path-join.html"><![CDATA[<p>Let’s join two absolute paths using the <code class="language-plaintext highlighter-rouge">os</code> module of python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">os</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/arfs6</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># Expecting /home/arfs6/proj
</span><span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span>
</code></pre></div></div>

<p>This was unexpected to me. I tried solving it by converting the second path to a relative path, and here is what i got:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">relpath</span><span class="p">(</span><span class="sh">'</span><span class="s">/proj</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">../../../proj</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> 
</code></pre></div></div>

<p>Looks like python is been too smart here. Just do what I asked you, nothing more, nothing less!</p>

<p>At this point, I don’t know what to do. I don’t want to resolve to string manipulation for paths.</p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><category term="python," /><category term="os-module" /><summary type="html"><![CDATA[>>> os.path.join('/home/arfs6', '/proj') # Expecting /home/arfs6/proj]]></summary></entry></feed>