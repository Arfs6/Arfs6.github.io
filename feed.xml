<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://arfs6.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arfs6.me/" rel="alternate" type="text/html" /><updated>2023-07-30T21:15:25+01:00</updated><id>https://arfs6.me/feed.xml</id><title type="html">Abdulqadir Ahmad</title><subtitle>Abdulqadir Ahmad&apos;s website. Where you can read his blogs, and get to know his projects.</subtitle><author><name>Abdulqadir Ahmad</name></author><entry><title type="html">Pythonic Wonders: Cache, Decorate, Parameterize, Memoize, and Mock!</title><link href="https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python.html" rel="alternate" type="text/html" title="Pythonic Wonders: Cache, Decorate, Parameterize, Memoize, and Mock!" /><published>2023-07-03T15:57:00+01:00</published><updated>2023-07-03T15:57:00+01:00</updated><id>https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python</id><content type="html" xml:base="https://arfs6.me/blog/python/2023/07/03/emanuel-wonders-of-python.html"><![CDATA[<p>The following passage was written by a <a href="https://twitter.com/kpakpando1">friend</a> of mine. It is so captivating. I like it! If you also like it, please reach out to him on <a href="https://twitter.com/kpakpando1">twitter</a> and tell him!<br />
Enjoy!<br />
<em>First it was cache. And then decorate. And now parameterize, memoize, and mock!!!</em><br />
<em>Python never ceases to amaze!</em><br />
<em>So what, if any, do these have in common, besides being wrapped together in a module? A lot!</em><br />
<em>Memoization is a use case for caching, i.e., memoization is caching when the cached thing is the result of a function call; in that case, the function being cached has to be designed to maintain the cache. And if the function is not natively able to memoize, itâ€™s easy - you decorate it! Remember, decoration is that magic that makes a function appear to do more than what it is born to do, without it having to be born again.ðŸ˜€ Just memoize it! By decorating it!</em><br />
<em>And after that, you can even mock it. Yes, thatâ€™s right - pretend to be the function when you are a pure fake! And itâ€™s easy to do that too - just import Mock from unittest.mock and create a mock object and make it fake to return anything you wish! Or, if you are enjoying the pun, try MagicMock. Same stuff, with more Python magic sprinkled on it.ðŸ˜€</em><br />
<em>And oh, I almost forgot: while youâ€™re at it, there is more fun - you can make multiple tests more cool - just parameterize it. That is, use one test with parameters to do several others at once, like killing several birds with one stone.</em><br />
<em>See? Itâ€™s easy when you think about it!</em><br />
<em>No cacheðŸ˜€</em><br />
<em>ðŸ¤©Do.Pythonic.Things</em></p>]]></content><author><name>Abdulqadir Ahmad</name></author><category term="python" /><summary type="html"><![CDATA[The following passage was written by a friend of mine. It is so captivating. I like it! If you also like it, please reach out to him on twitter and tell him! Enjoy! First it was cache. And then decorate. And now parameterize, memoize, and mock!!! Python never ceases to amaze! So what, if any, do these have in common, besides being wrapped together in a module? A lot! Memoization is a use case for caching, i.e., memoization is caching when the cached thing is the result of a function call; in that case, the function being cached has to be designed to maintain the cache. And if the function is not natively able to memoize, itâ€™s easy - you decorate it! Remember, decoration is that magic that makes a function appear to do more than what it is born to do, without it having to be born again.ðŸ˜€ Just memoize it! By decorating it! And after that, you can even mock it. Yes, thatâ€™s right - pretend to be the function when you are a pure fake! And itâ€™s easy to do that too - just import Mock from unittest.mock and create a mock object and make it fake to return anything you wish! Or, if you are enjoying the pun, try MagicMock. Same stuff, with more Python magic sprinkled on it.ðŸ˜€ And oh, I almost forgot: while youâ€™re at it, there is more fun - you can make multiple tests more cool - just parameterize it. That is, use one test with parameters to do several others at once, like killing several birds with one stone. See? Itâ€™s easy when you think about it! No cacheðŸ˜€ ðŸ¤©Do.Pythonic.Things]]></summary></entry></feed>